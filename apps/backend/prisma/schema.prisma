generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  COURIER
  OWNER
}

enum Status {
  PENDING
  ONGOING
  FINISHED
  CANCELLED
}

enum Tag {
  BURGER
  AMERICAN
  PIZZA
  SALAD
  ITALIAN
  CHICKEN
  BREAKFAST
  PASTA
  ASIAN
  VEGETARIAN
  VEGAN
  SOUP
  GYROS
  STREET
  DESSERT
  THAI
  KEBAB
  SANDWICH
  JAPANESE
  MEDITERANEAN
  MEXICAN
  SUSHI
}

model User {
  id        String      @id @default(uuid())
  name      String
  email     String      @unique
  phone     String?     @unique
  addresses String[]
  role      Role        @default(CUSTOMER)
  image     String?
  orders    Order[]
  cart      Cart?
  ownerOf   Restaurant?
}

model Food {
  id           String      @id @default(uuid())
  name         String
  description  String
  price        Float
  image        String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  orders       OrderItem[]
  carts        CartItem[]
}

model Cart {
  id     String     @id @default(uuid())
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String     @unique
  total  Float      @default(0)
  items  CartItem[]
}

model CartItem {
  id     String @id @default(uuid())
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String
  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String
}

model Order {
  id           String      @id @default(uuid())
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  total        Float
  items        OrderItem[]
  status       Status      @default(PENDING)
  createdAt    DateTime    @default(now())
}

model OrderItem {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
  food    Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId  String
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String
  description String
  addresses   String[]
  rating      Float[]
  tags        Tag[]
  image       String?
  foods       Food[]
  order       Order[]
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String   @unique
}
